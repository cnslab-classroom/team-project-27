	0. DataStructure

-FireBase에 저장될 Data 구조

	users
	├── id1
	│   ├── password: "exPassword123"
	│   ├── questionIndex: 1
	│   ├── questionAns: "ex답변1"
	│   ├── autoLoginStr: "a012daaw21yio3io6oint63"
	│   ├── autoLoginKey: "123214214"
	│   └── schedules
	│	  ├── 2024.11.16: {"일정1","일정2","일정3",}
	│	  └── 2024.12.23: {"일정11", "일정12", "일정13", ...}
	├── id2
	│   ├── password: "exPassword21313"
	│   ├── questionIndex: 3
	│   ├── questionAns: "ex답변2"
	│   ├── autoLoginStr: "u4h5ndi32pof"
	│   ├── autoLoginKey: "2132134"
	│   └── schedules
	│	  ├── 2024.11.17: {"asd","123","dw", ...}
	│	  └── 2024.12.22: {"일정11", "일정12", "일정13", ...}
	.
	.
	.

#Path 예시: getData("/users/id2/schedules/2024.11.17") >> {"asd","123","dw", ...}


###############################################################################

	1. Register Class [Firebase, Random, FileI/O]	//박대원

-boolean register(String id, String password, int questionIndex, String questionAns)	//회원가입 시스템, 받아온 Data들을 FireBase에 저장 
#pre: id(String), password(String), questionIndex(int), questionAns(String)
#post: Succes - True | Fail - False

-int login(String id, String password, boolean autoLogin)	//로그인 시스템, 기타 오류 0, 로그인 성공 시 1, id가 존재하지 않는다면 2, password가 틀렸다면 3 반환 | 로그인 성공 시, autoLogin이 True라면 내부 txt파일과 DB에 자동로그인 설정 
#pre: len(id)>0 | len(password)>0
#post: Other errors - 0, Success - 1,  ID does not exist - 2, Password is wrong - 3

-boolean autoLogin()	//내부 json파일에 저장된 ID와 암호화된 문자열, ket 문자열이 각각 해시를 통해 FB에 저장된 문자열들과 같다면, 이를 기반으로 자동 로그인
#pre: None
#post: Succes - True | Fail - False

-int findPassword(String id, int questionIndex, String questionAns, String newPassword)	//입력한 정보들이 일치한다면 Password 재설정 | Ps 재설정 성공 시 1, id가 존재하지 않는다면 2, 저장된 question 정보와 다를 시 3
#pre: id(String), questionIndex(int), questionAns(String), newPassword(String)
#post: Success - 1,  ID does not exist - 2, Answer is wrong - 3

-CompletableFuture<String[]> getKeyArray()	//path에 존재하는 key 값들을 Array형태로 반환, 만약 날짜가 지난 일정이 존재한다면 delData(String path, int index)를 호출하여 Data 삭제
#pre: path(String): "/key1/key2/.../key"
#post: keyList(String[]) - {"key값 1", "key값 2", ...}

-CompletableFuture<String[]> getData(String path)	//path(마지막 key값이 목표 key)에 해당하는 value 값을 받아옴
#pre: path(String): "/key1/key2/.../key" 
#post: String[]처럼 값을 얻어내기 위해서는 String[] result = getData(...).get(); 으로 실행해야함 / Data(String[]) - {"저장된 일정1","저장된 일정2", ...}

-CompletableFuture<boolean> setData(String path, String data)	//path에 key(string)-value(String) 형태로 data 저장, 내부에서 path에 schedules가 포함되어 있다면 일정 저장으로 인지하여 일정을 추가하는 형태의 코드가 실행
#pre: path(String): "/key1/key2/.../key" | Data(String): "저장할 Data" and len(Data)>0
#post: boolean처럼 값을 얻어내기 위해서는 boolean result = setData(...).get(); 으로 실행해야함 / Succes - True | Fail - False

-boolean delData(String path,int index)	//path에 존재하는 일정 배열 중 index에 해당하는 data 삭제, index==-1 이면 배열 전체를 삭제
#pre: path(String): "/key1/key2/.../key" | index(int) >=-1
#post: Succes - True | Fail - False

###############################################################################
	2. Scheduler Class	//박예진

-boolean addSche(Register user, String date, String data)	//일정 추가 구현, addScheScreen에서 Data들을 받아와 setData(String path, String data) 호출
#pre: user(Register), date(String): "Year/Month/Day" | data(String): "저장할 일정" and len(data)>0
#post: Succes - True | Fail - False

-TreeMap<int,int> allScheSummary(Register user)	//모든 일정 요약 구현, getKeyArray()를 통해 key값들을 받아오고 getData(String path)을 호출한 데이터들을 TreeMap으로 정리 후 반환
#pre: None
#post: Schedule summary(TreeMap) - {남은 일자1:일정 개수1, 남은 일자2:일정 개수2, ...}	//key(남은 일자), value(일정 개수)

-String[] specifyScheList(Register user, String date)	//date를 기반으로 path를 설정한 뒤, getData(String path)를 호출하여 일정 목록을 반환
#pre: date(String): "YearMonthDay"	(ex.20241212)
#post: ScheList(String[]) - {"저장된 일정1","저장된 일정2", ...}

-boolean delSche(Register user, String date, int index)	//date를 기반으로 path를 설정한 뒤, getData(String path)를 호출하여 index에 해당하는 data 삭제 후 setData로 다시 저장, index==-1 해당 날짜의 모든 일정 삭제
#pre: date(String): "Year/Month/Day" | index(int) >=-1 && index(int) < len(getData(String path))
#post: Succes - True | Fail - False

###############################################################################
	3. SchedulerInterface Class	//박건하

-void autoLginScreen(Register user)	//가장 처음 시작하는 창, 처음 시작할 때 1번만 autoLogin() 호출 | 성공 시 mainScreen, 실패 시 loginScreen으로 이동
#pre: user(Register)	//user 정보를 저장하는 용도이므로 사실상 None과 비슷함
#post: AutoLogin 진행화면(GUI) -> Main화면 or Login화면(GUI)

-void loginScreen(Register user)	// Id, Password 입력 칸, Button(로그인, 회원가입, Password 찾기)이 존재하며, 각 버튼을 클릭 시 login(), registerScreen(), findPasswordScreen() 호출, 자동 로그인 checkbox 구현
#pre: user(Register)	//user 정보를 저장하는 용도이므로 사실상 None과 비슷함
#post: Login화면(GUI)

-void registerScreen()	// Id, Password, findPassword에 사용될 본인 확인 question, questionAnswer 칸 존재 | getkeyArray()을 사용하여 id 중복여부 확인 및 각 요소에 대한 글자 수 제한 설정 | 모두 부합하다면 register()호출
#pre: None
#post: Register화면(GUI)

-void findPasswordScreen()	//Id, 본인 확인 question, Answer, NewPassword을 입력한 뒤, findPassword() 호출
#pre: None
#post: findPassword화면(GUI)

-void mainScreen()	//Main화면, 로그인(자동 포함)을 정상적으로 성공한 경우 showAllScheScreen()을 무조건 한 번 호출
#pre: None
#post: Main화면(GUI)

-void addScheScreen()	//일정추가 화면, 날짜 설정 및 저장할 일정을 입력한 후 addSche(Register user, String date, String data) 호출
#pre: None
#post: 일정 추가 성공 or 실패 알림화면 -> Main화면(GUI)

-void showAllScheScreen(TreeMap<int,int> scheSummary)	//모든 일정 요약 화면, allScheSummary(Register user)을 호출하여 받아온 Data를 화면에 정리하여 출력
#pre: scheSummary(TreeMap<int,int>): {남은 일자1:일정 개수1, 남은 일자2:일정 개수2, ...}	//key(남은 일자), value(일정 개수)
#post: "?개의 일정이 $일 남았습니다. ?개의 일정이 $일 남았습니다. ..." 일정 요약 화면 출력 -> Main화면(GUI)

-void showSpecifyScheListScreen(String[] scheList)	//getKeyArray()을 호출하여 일정이 저장된 Date들 중 하나를 선택하여 specifyScheList(Register user, String date)을 호출하여 Data에 Index를 부여 및 정리 후 출력
#pre: ScheList(String[]) - {"저장된 일정1","저장된 일정2", ...}
#post: 정리된 Data 화면 출력 -> Main화면(GUI)

-void delScheScreen()	//showSpecifyScheListScreen() 화면에서 일정 삭제 버튼을 클릭 시 해당 함수 호출, Index를 지정하여 delSche(Register user, String date, int index)을 호출하고서 성공 및 실패 여부를 화면에 출력
#pre: None
#post: 일정 삭제 성공 or 실패 알림화면 ->Main화면(GUI)

###############################################################################

	4. 기타 추가 사항

-각 class파일에 packge schedulerAlertApp 추가
-SchedulerInterface Class만 내부에 Register 및 Scheduler Class를 변수로 선언

-2024/11/19_1
	1. 	Register Class의 Array<Stiring> getKeyArray(),Array<Stiring> getData(String path),
		Scheduler Class의 Array<String> specifyScheList(Register user, String date),
		SchedulerInterface Class의 void showSpecifyScheListScreen(Array<String> scheList)
	의 type이 올바르지 않은 형태이기에 Array<String> -> String[] 로 변경
	2. Firebase의 RealtimeDatabase에서 저장되는 날짜(key) 형식에 의해 기존 String[] specifyScheList(Register user, String date)의
	date 형식을 "Year/Month/day" -> "YearMonthDay"로 변경. (ex.20241212)

-2024/11/19_2
	1. int login(String id, String password, boolean autoLogin)에 "기타 오류" 코드(0) 추가

-2024/11/21_1
	1. 회원의 비밀번호 보안을 위해 BCrypt 알고리즘을 적용하여 저장, 그렇기에 BCrypt 라이브러리 추가
	2. autoLogin 기능을 위해 txt파일이 아닌 json파일로 저장하며, json파일을 저장 및 읽을 수 있는 Jackson 라이브러리 추가
	3. autoLogin 기능 보완을 위해 key를 사용하여 Client에 저장된 str을 해독하는 방식이 아닌 해시를 2번 사용하여 FB에 저장될 Str에는 1차 코드 해시값,
	 Key에는 2차 코드 값 / Client에는 Str은 1차 코드 값, Key에는 2차 코드 해시값을 저장한다. 이를 통해 한 쪽의 Data로는 이해하기 autoLogind을 의도적으로 뚫기 어렵다.
	4. setData 함수의 구현계획 설명 추가 및 수정
	5. Firebase의 비동기적 작동을 위해 
		boolean setData(...) 함수를 CompletableFuture<boolean> setData(...)
		String[] getData(...) 함수를 CompletableFuture<String[]> getData(...)
		String[] getKeyArray(...) 함수를 CompletableFuture<String[]> getKeyArray()
	함수로 대체함. *사용 방법 필히 참고* 
	getKeyArray().thenAccept(userIdsList -> {
		List<String> keyList = Arrays.asList(userIdsList);
	}).exceptionally(ex -> {
		System.err.println("Failed to retrieve userIdsList: " + ex.getMessage());
		return null;
	}); 와 같이 사용하면 비동기적 처리를 진행하고서 동기적으로 코드가 처리 됨.